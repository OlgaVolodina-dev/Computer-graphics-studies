R"(#version 440 core

layout(triangles, equal_spacing, cw) in;
uniform sampler2D texture1;
in vec2 TESTexPos[];
in mat4 TESModelTransform[];
out vec2 FragTexPos;
out vec3 FragNormal;
out vec3 FragPos;
out vec4 FragLightPos;

layout(std140, binding = 2) uniform GlobalMatrices
{
    mat4 view;
    mat4 projection;
    vec4 cameraPos;
    vec4 lightSource1;
    vec4 attenuation1;
    vec4 lightSource2;
    vec4 attenuation2;
    mat4 lightSpaceMatrix;
    vec4 lightDir;
};

void main()
{

    vec2 t0 = gl_TessCoord.x * TESTexPos[0];
    vec2 t1 = gl_TessCoord.y * TESTexPos[1];
    vec2 t2 = gl_TessCoord.z * TESTexPos[2];
    FragTexPos  = t0+t1+t2;
    vec3 color = vec3(texture(texture1, FragTexPos));
    //float height = (color.r / color.g) / 2.0;
    float height = color.r;
    vec3 p0 = gl_TessCoord.x * gl_in[0].gl_Position.xyz;
	vec3 p1 = gl_TessCoord.y * gl_in[1].gl_Position.xyz;
	vec3 p2 = gl_TessCoord.z * gl_in[2].gl_Position.xyz;
    vec3 result = p0 + p1 + p2;
    result.y = result.y + height ;
    FragPos = vec3(TESModelTransform[0] * vec4(result, 1.0));
    FragLightPos = lightSpaceMatrix * vec4(FragPos, 1.0);
    gl_Position =  projection * view * TESModelTransform[0] * vec4(result, 1.0);
}
)"